plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

apply plugin: 'eclipse'

group = 'net.tropicraft'
archivesBaseName = 'Tropicraft'

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
version = "${mod_version}-${release_type}+${buildnumber}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '16' // Need this here so eclipse task generates correctly.

repositories {
    maven { url = "https://maven.shedaniel.me/" }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.net/"
    }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    mavenLocal()
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url 'https://jitpack.io'
    }

    jcenter()
    mavenCentral()
}

sourceSets {
    portaforgy{}
    main {
        compileClasspath += sourceSets.portaforgy.output
        runtimeClasspath += sourceSets.portaforgy.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    datagen {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.portaforgy.output
        runtimeClasspath += sourceSets.portaforgy.output
//        resources{
//            srcDir 'src/datagen/resources'
//        }
    }
    test {
        compileClasspath += sourceSets.portaforgy.output
        runtimeClasspath += sourceSets.portaforgy.output
    }
}

configurations {
    portaforgyImplementation.extendsFrom(compileClasspath)
    datagenImplementation.extendsFrom(compileClasspath)
    datagenRuntimeOnly.extendsFrom(runtimeClasspath)
}

repositories {
	mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-1.17.1:BLEEDING-SNAPSHOT")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "io.github.onyxstudios:Cardinal-Components-API:3.1.1"
    include "io.github.onyxstudios:Cardinal-Components-API:3.1.1"

    modImplementation 'com.github.Chocohead:Fabric-ASM:v2.3'

}

//import net.fabricmc.loom.task.RunClientTask;


//task dataGen(type: runClient, dependsOn: downloadAssets, group: "tropicraft", description: "Generates various JSON assets for the mod, thanks to ae2"){
//    classpath = configurations.runtimeClasspath
//    classpath sourceSets.portaforgy.output
//    classpath sourceSets.main.output
////    classpath sourceSets.datagen.output
//    systemProperty "tropicraft.generateData", "true"
//}


loom {
    //silentMojangMappingsLicense()
    accessWidenerPath = file("src/main/resources/tropicraftFabric.accesswidener")
    runs {
        datagenTest{
            client()
            source "datagen"
            property "tropicraft.generateData", "true"
            property "tropicraft.generateData.outputPath", file("src/generated/resources").absolutePath
            property "tropicraft.generateData.existingData", file("src/main/resources").absolutePath
        }
    }
}

processResources {
    exclude '.cache'

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "tropicraftmod",
            "Specification-Vendor": "Tropicraft",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Tropicraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "tropicraft.mixins.json"
        ])
    }
}

tasks.curseforge.enabled = !dev && project.hasProperty('cojo_curseforge_key')

curseforge {
    if (project.hasProperty('cojo_curseforge_key')) {
        apiKey = project.cojo_curseforge_key
    }

    project {
        id = project.project_id
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? '' : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.release_type
        addGameVersion project.minecraft_version
        mainArtifact(jar) {
            displayName = archivesBaseName + " - ${version}"
        }
    }
}

//mixin {
//    add sourceSets.main, "tropicraft.refmap.json"
//}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}



